
   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>Superjomn&#39;s Blog</title>
       <link>http://superjomn.github.io/posts/</link>
       <description>Recent content on Superjomn&#39;s Blog</description>
       <generator>Hugo -- gohugo.io</generator>
       <language>en-us</language>
       <lastBuildDate>Thu, 09 Jan 2020 00:00:00 +0800</lastBuildDate>
       
           <atom:link href="http://superjomn.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>Leetcode Jump game</title>
         <link>http://superjomn.github.io/posts/leetcode_jump_game/</link>
         <pubDate>Thu, 09 Jan 2020 00:00:00 +0800</pubDate>
         
         <guid>http://superjomn.github.io/posts/leetcode_jump_game/</guid>
         <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&#34;-1&#34;&gt;问题 1&lt;/h2&gt;
&lt;p&gt;Given an array of non-negative integers, you are initially positioned at the first index of the array.&lt;/p&gt;
&lt;p&gt;Each element in the array represents your &lt;strong&gt;maximum jump length&lt;/strong&gt; at that position.&lt;/p&gt;
&lt;p&gt;Determine if you are able to reach the last index.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum
             jump length is 0, which makes it impossible to reach the last index.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以用一个简单的DP，用于记录每步可以 jump 的最长距离，当这个距离可以达到终点时，便可以返回 true&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;(object):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;canJump&lt;/span&gt;(self, nums):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :type nums: List[int]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :rtype: bool&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        pos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)
        maxsteps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; maxsteps:
            maxsteps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(maxsteps, pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[pos])
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; maxsteps &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2--jump-&#34;&gt;问题2 最少 Jump 数&lt;/h2&gt;
&lt;p&gt;Given an array of non-negative integers, you are initially positioned at the first index of the array.&lt;/p&gt;
&lt;p&gt;Each element in the array represents your maximum jump length at that position.&lt;/p&gt;
&lt;p&gt;Your goal is to reach the last index in the minimum number of jumps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2.
    Jump 1 step from index 0 to 1, then 3 steps to the last index.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can assume that you can always reach the last index.&lt;/p&gt;
&lt;p&gt;使用 BFS，用 &lt;code&gt;[left, right]&lt;/code&gt;记录每次能够达到的范围&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;(object):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jump&lt;/span&gt;(self, nums):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :type nums: List[int]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :rtype: int&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# memo records the minimum jump times to reatch the current position&lt;/span&gt;
        N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        
        queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
       
        level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# bound of each level&lt;/span&gt;
        left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        maxv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; queue:
            &lt;span style=&#34;color:#75715e&#34;&gt;# visit top&lt;/span&gt;
            levels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; queue:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; level
                maxv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(maxv, v&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;nums[v])
            left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right
            right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; maxv
            
            queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xrange(left&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, right&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(v)
            
            level &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; level
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/jump-game-ii/discuss/474943/Python-GreedyBFS-tow-solutions-with-explanation&#34;&gt;https://leetcode.com/problems/jump-game-ii/discuss/474943/Python-GreedyBFS-tow-solutions-with-explanation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3&#34;&gt;问题3&lt;/h2&gt;
&lt;p&gt;Given an array of non-negative integers &lt;code&gt;arr&lt;/code&gt;, you are initially positioned at &lt;code&gt;start&lt;/code&gt; index of the array. When you are at index &lt;code&gt;i&lt;/code&gt;, you can jump to &lt;code&gt;i + arr[i]&lt;/code&gt; or &lt;code&gt;i - arr[i]&lt;/code&gt;, check if you can reach to &lt;strong&gt;any&lt;/strong&gt; index with value 0.&lt;/p&gt;
&lt;p&gt;Notice that you can not jump outside of the array at any time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: arr = [4,2,3,0,3,1,2], start = 5
Output: true
Explanation: 
All possible ways to reach at index 3 with value 0 are: 
index 5 -&amp;gt; index 4 -&amp;gt; index 1 -&amp;gt; index 3 
index 5 -&amp;gt; index 6 -&amp;gt; index 4 -&amp;gt; index 1 -&amp;gt; index 3 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: arr = [4,2,3,0,3,1,2], start = 0
Output: true 
Explanation: 
One possible way to reach at index 3 with value 0 is: 
index 0 -&amp;gt; index 4 -&amp;gt; index 1 -&amp;gt; index 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: arr = [3,0,2,1,2], start = 2
Output: false
Explanation: There is no way to reach at index 1 with value 0.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= arr.length &amp;lt;= 5 * 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= arr[i] &amp;lt; arr.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= start &amp;lt; arr.length&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;采用普通的 DFS&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;(object):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;canReach&lt;/span&gt;(self, arr, start):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :type arr: List[int]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :type start: int&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :rtype: bool&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; arr[start] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; arr[start] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        
        tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[start]
        arr[start] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        
        left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; tmp
        right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tmp
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;canReach(arr, left): &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(arr) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;canReach(arr, right): &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
       </item>
       
       <item>
         <title>Devide and conqur(分治法)</title>
         <link>http://superjomn.github.io/posts/leetcode_binary_devide_and_conqur/</link>
         <pubDate>Mon, 30 Dec 2019 00:00:00 +0800</pubDate>
         
         <guid>http://superjomn.github.io/posts/leetcode_binary_devide_and_conqur/</guid>
         <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#binary-search--bs&#34;&gt;Binary search(BS)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%B9%E6%B3%95%E4%B8%80&#34;&gt;方法一&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%B9%E6%B3%95%E4%BA%8C&#34;&gt;方法二&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#c-plus-plus-stl-%E5%87%BD%E6%95%B0&#34;&gt;C++ STL 函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%BB%8F%E5%85%B8%E9%A2%98&#34;&gt;经典题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;本文介绍分治法的一些思想和经典题。&lt;/p&gt;
&lt;h2 id=&#34;binary-search--bs&#34;&gt;Binary search(BS)&lt;/h2&gt;
&lt;p&gt;BS 的复杂度是 \(O(\log N)\)&lt;/p&gt;
&lt;p&gt;具体实现方法有两种&lt;/p&gt;
&lt;h3 id=&#34;方法一&#34;&gt;方法一&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (arr[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x) {...}  &lt;span style=&#34;color:#75715e&#34;&gt;// found
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (arr[k] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; x) b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;方法二&#34;&gt;方法二&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; b &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; arr[k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x) k &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (arr[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x) { ... } &lt;span style=&#34;color:#75715e&#34;&gt;// found
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c-plus-plus-stl-函数&#34;&gt;C++ STL 函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lower_bound&lt;/code&gt; 获取不小于目标的第一个元素地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;upper_bound&lt;/code&gt; 获取不小于目标的最后一个元素地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equal_range&lt;/code&gt; 获取上述两个地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;具体示例&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; arr{{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}};
std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;sort(arr.begin(), arr.end()); &lt;span style=&#34;color:#75715e&#34;&gt;// NOTE all methods work on sorted array
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;method pos&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;endl;

&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; lower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;lower_bound(arr.begin(), arr.end(), &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;lower &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lower &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; arr.begin() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;endl;

&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; lower1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;lower_bound(arr.begin(), arr.end(), &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;lower5 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lower &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; arr.begin() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;endl;

&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; upper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;upper_bound(arr.begin(), arr.end(), &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;upper &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; upper &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; arr.begin() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;endl;

&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; range &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;equal_range(arr.begin(), arr.end(), &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;range &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (range.first &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; arr.begin()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (range.second &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; arr.begin()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;endl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;method&lt;/th&gt;
&lt;th&gt;pos&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;lower&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lower5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;upper&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;range&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;经典题&#34;&gt;经典题&lt;/h3&gt;
&lt;h4 id=&#34;finding-the-smallest&#34;&gt;Finding the smallest&lt;/h4&gt;
&lt;p&gt;一个数组，先变小，后变大&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Binary search 最重要的应用就是寻找一个函数的数值变化的位置&lt;/strong&gt;&lt;/strong&gt;, 这里假设目标函数是 &lt;code&gt;x&amp;gt;=k&lt;/code&gt; ，那么原有数组中的每个 \(x\) 作为输入，会得到目标函数的值&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;x&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;&amp;hellip;&lt;/th&gt;
&lt;th&gt;k -1&lt;/th&gt;
&lt;th&gt;k&lt;/th&gt;
&lt;th&gt;k+1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ok(x)&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;因此，原有问题转变为寻找最后一个 \(ok()\) 值为 false 的 \(x\) ，转变为经典 BS 问题。&lt;/p&gt;
&lt;p&gt;这里代码最简洁的是使用第二种 BS 的写法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; b &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;ok(x_b))
    x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
       </item>
       
       <item>
         <title>Builer Design Pattern</title>
         <link>http://superjomn.github.io/posts/design_pattern_builder/</link>
         <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/design_pattern_builder/</guid>
         <description>&lt;h1 id=&#34;heading&#34;&gt;简介&lt;/h1&gt;
&lt;p&gt;Builder Pattern 可以用来帮助创建构造函数很多备选参数的复杂类，比如定义一个 Computer 类&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Computer&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    Computer(GrapicsCard g, Monitor m, Process p, Memory ram)
    &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;graphics_card_(g),
     monitors_(m),
     processor_(p),
     ram_(ram) { ... }
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    GraphicsCard graphics_card_;
    Monitor monitors_;
    Processor processor_;
    Memory ram_;
};

&lt;span style=&#34;color:#75715e&#34;&gt;// usage
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Computer &lt;span style=&#34;color:#a6e22e&#34;&gt;compter&lt;/span&gt;(g, m, p, ram); &lt;span style=&#34;color:#75715e&#34;&gt;// hard to read
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Builder 能够以更可读的方式实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ComputerBuilder&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Computer&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Pass a pointer for std::move some heavy members.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Computer(ComputerBuilder&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; builder);
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    GraphicsCard graphics_card_;
    Monitor monitors_;
    Processor processor_;
    Memory ram_;
};

&lt;span style=&#34;color:#75715e&#34;&gt;// in cpp file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Computer:Computer(ComputerBuilder&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; builder) {
    graphics_card_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builder&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;graphics_card();
    monitors_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builder&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;monitors();
    processors_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builder&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;processor();
    ram_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builder&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;ram();
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ComputerBuilder&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    CompterBuilder() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;;
    
    ComputerBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SetGraphicsCard(GraphicsCard x) { graphics_card_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x; }
   	ComputerBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SetMonitor(Monitor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { monitors_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x; }
    ComputerBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SetProcessors(Processor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { processors_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x; }
    ComputerBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SetMemory(Memory&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { ram_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x; }
    Computer &lt;span style=&#34;color:#a6e22e&#34;&gt;Build&lt;/span&gt;() { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Computer(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;); }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    GraphicsCard graphics_card_;
    Monitor monitors_;
    Processor processor_;
    Memory ram_;    
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; computer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ComputerBuilder().SetGraphicsCard(...)
                                 .SetMonitor(...)
                                 .SetProcessors(...)
                                 .SetMemory(...)
                                 .Build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading-1&#34;&gt;实际应用&lt;/h1&gt;
&lt;p&gt;TensorFlow 里的 operator 的注册有用到，具体可以参考任何 operator 的 .cc 文件&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://riptutorial.com/design-patterns/example/12132/builder-pattern---java-implementation&#34;&gt;Builder pattern - Java implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>Visitor Design Pattern</title>
         <link>http://superjomn.github.io/posts/design_pattern_visitor/</link>
         <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/design_pattern_visitor/</guid>
         <description>&lt;p&gt;Visitor Pattern 用于表示对某种对象的操作，当增加新的操作时，无需修改被操作对象的代码。&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;使用前&lt;/h1&gt;
&lt;p&gt;比如，我们定义一类宠物，有两个实现猫(Cat) 和狗(Dog)；宠物都有抚摸(Stroke) 和喂食(Feed) 的操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pet&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Stroke() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Feed&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对应实现 Cat 和 Dog 的两个操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cat&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Pet {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Stroke() &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;/* cat stroke way */&lt;/span&gt; }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Feed&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;/* cat feed way */&lt;/span&gt; }
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Pet {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Stroke() &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;/* dog stroke way */&lt;/span&gt; }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Feed&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;/* dog feed way */&lt;/span&gt; }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类似 &lt;code&gt;Pet&lt;/code&gt; 这样的接口实现，会有如下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类似 Stroke 和 Feed 这类 Pet 操作，会有很多，比如 Train, Hug 等等&lt;/li&gt;
&lt;li&gt;每增加一种操作，都需要修改所有 Pet 的实现，工作量可能很大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Visitor Pattern 就是用于优化此类场景的建模，在增加更多操作后，不需要修改被操作方的代码。&lt;/p&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;模板&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// interfaces
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visitor&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Visit(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; AccepterA&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; AccepterB&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
};
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Accepter&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(Visitor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; visitor) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
};

&lt;span style=&#34;color:#75715e&#34;&gt;// implementations
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AccepterA&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(Visitor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { x.Visit(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;); }
};
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AccepterB&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(Visitor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { x.Visit(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;); }
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SomeVisitor&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Visit(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; AccepterA&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { ... }  &lt;span style=&#34;color:#75715e&#34;&gt;// operate on AccepterA 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; AccepterB&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { ... }  &lt;span style=&#34;color:#75715e&#34;&gt;// operate on AccepterB
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};


&lt;span style=&#34;color:#75715e&#34;&gt;// use it
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Accepter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; accepters;
    SomeVisitor visitor;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x : accepters) {
        x.Accept(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;visitor);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading-2&#34;&gt;使用后&lt;/h1&gt;
&lt;p&gt;对应着，之前的示例可以修改为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Visitor interface
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PetVisitor&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Visit(Dog&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; dog);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visit&lt;/span&gt;(Cat&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; cat);
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StrokeOpr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PetVisitor {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Visit(Dog&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; dog) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;stroke a dog&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; endl;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visit&lt;/span&gt;(Cat&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; cat) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;stroke a cat&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; endl;
    }
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FeedOpr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PetVisitor {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Visit(Dog&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; dog) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;feed a dog&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; endl;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visit&lt;/span&gt;(Cat&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; cat) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;feed a cat&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; endl;
    }
};

&lt;span style=&#34;color:#75715e&#34;&gt;// Pet interface
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pet&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(PetVisitor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; visitor) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cat&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(PetVisitor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; visitor) &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; { visitor&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Visit(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;); }
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(PetVisitor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; visitor) &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; { visitor&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Visit(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;); }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading-3&#34;&gt;实际案例&lt;/h1&gt;
&lt;p&gt;之前在一些 NN Compiler 里看到 IR 用了这个设计模式，比较早的是 Halide 的代码，比如 &lt;a href=&#34;https://github.com/halide/Halide/blob/release_2019_08_27/src/IRVisitor.h&#34;&gt;IRVisitor.h&lt;/a&gt; ，这里摘抄部分&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** A base class for algorithms that need to recursively walk over the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * IR. The default implementations just recursively walk over the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * children. Override the ones you care about.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IRVisitor&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    IRVisitor();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;IRVisitor();
&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ExprNode&amp;lt;&amp;gt; and StmtNode&amp;lt;&amp;gt; are allowed to call visit (to implement accept())
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;friend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExprNode&lt;/span&gt;;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;friend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StmtNode&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; IntImm &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; UIntImm &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FloatImm &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; StringImm &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Cast &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Variable &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Add &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Sub &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Mul &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Div &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Mod &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Min &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Max &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; EQ &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; NE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; LT &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; LE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; GT &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; GE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; And &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Or &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Not &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Select &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Load &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Ramp &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Broadcast &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Call &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Let &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; LetStmt &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; AssertStmt &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ProducerConsumer &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; For &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Store &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Provide &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Allocate &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Free &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Realize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Block &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; IfThenElse &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Evaluate &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Shuffle &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Prefetch &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Fork &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Acquire &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最开头说过，Visitor Pattern 的好处是，增加新操作时，无需对操作对象做修改，这里 IR 的操作对象有 34 个，能感受到规模和效果了吧。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpppatterns.com/patterns/visitor.html&#34;&gt;C++ Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/visitor-design-pattern/&#34;&gt;Visitor Design Pattern - GeeksforGeeks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>Design Pattern Observer 观察者模式</title>
         <link>http://superjomn.github.io/posts/design_pattern_observer/</link>
         <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/design_pattern_observer/</guid>
         <description>&lt;p&gt;想象这样的场景，为气象站设计一整套系统，支持订阅功能，不同的仪器，比如手机、LED显示屏在天气发生大的变化时，会自动收到更新信息。&lt;/p&gt;
&lt;p&gt;其中的挑战有&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;订阅的设备的列表可能随时发生变化
&lt;ol&gt;
&lt;li&gt;比如，手机没电下线了；或者一个新的手机加入了订阅&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;气象站的带宽有限，订阅设备数可能很大
&lt;ol&gt;
&lt;li&gt;所以，无法支持每种设备简单 &lt;code&gt;while(true) { sleep(20); request_for_data(); }&lt;/code&gt; 的实现&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;更新需要实时&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类似这样的场景，就是观察者模式适用的。&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;接口定义&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Observable&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Observer&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Update the state of this observer.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Update(Observable&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; obs) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;    
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Observable&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Register an observer.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RegisterObserver(Observer &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;observer) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Notify all the registered observers when a change happened.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotifyObservers&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading-1&#34;&gt;具体实现&lt;/h1&gt;
&lt;p&gt;以 Weather station 为例，我们创建一些基础设施：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WeatherData&lt;/code&gt; 作为被观察者，被其他 observer 观察&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Client&lt;/code&gt; 作为观察者，订阅和观察 &lt;code&gt;WeatherData&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;observable-&#34;&gt;Observable 实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WeatherData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Observable {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RegisterObserver(Observer&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; observer) &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; {
        observers_.push_back(observer);
    }
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotifyObservers&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;changed_) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// avoid unnecessary update.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; observer: observers) {
            observer&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Update(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
        }
        changed_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
    }
    
    &lt;span style=&#34;color:#75715e&#34;&gt;// getter
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temperature&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; temperature_; }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;humidity&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; humidity_; }
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Mark whether the state is changed recently.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; changed_{false};
    &lt;span style=&#34;color:#75715e&#34;&gt;// the whether states are as follows
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; temperature_{};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; humidity_{};
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;observer-&#34;&gt;Observer 实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Observer {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Update(Observer&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; obs) &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;// Here is compatible with different kinds of Observer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; theobs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dynamic_cast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;WeatherData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(obs);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (theobs) {
            &lt;span style=&#34;color:#75715e&#34;&gt;// do something
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            DisplayTemperature(theobs&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;temperature());
            DisplayHumidity(theobs&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;humidity());
        }
    }
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DisplayTemperature&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; x) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DisplayHumidity&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; x) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Head First 设计模式&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>Halide 代码阅读笔记</title>
         <link>http://superjomn.github.io/posts/halide-code-read-note/</link>
         <pubDate>Thu, 26 Dec 2019 00:00:00 +0800</pubDate>
         
         <guid>http://superjomn.github.io/posts/halide-code-read-note/</guid>
         <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%89%8D%E8%A8%80&#34;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%90%86%E8%A7%A3-halide-dsl-%E8%AF%AD%E6%B3%95&#34;&gt;理解 Halide DSL 语法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vectorize-parallelize-unroll-dot-dot-dot&#34;&gt;Vectorize, Parallelize, Unroll &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#type-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F&#34;&gt;Type - 类型系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ir&#34;&gt;IR&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E7%9B%B8%E5%85%B3-ir&#34;&gt;数学计算相关 IR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%8A%9F%E8%83%BD-ir&#34;&gt;功能 IR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%A4%8D%E6%9D%82-ir&#34;&gt;复杂 IR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stmt-%E5%92%8C-expr-%E7%9A%84%E5%8C%BA%E5%88%AB&#34;&gt;Stmt 和 Expr 的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ir-%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C&#34;&gt;IR 相关操作&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#equality&#34;&gt;Equality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#print&#34;&gt;Print&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#simplify&#34;&gt;Simplify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unrollloops&#34;&gt;UnrollLoops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vectorizeloops&#34;&gt;VectorizeLoops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lower&#34;&gt;Lower&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#bounds-inference&#34;&gt;bounds inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slidding-window&#34;&gt;slidding window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#simplify&#34;&gt;simplify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#storage-folding&#34;&gt;storage folding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#storage-flattening&#34;&gt;storage flattening&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vectorize-loops&#34;&gt;vectorize loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unroll-loops&#34;&gt;unroll loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rewrite-interleavings&#34;&gt;rewrite interleavings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#remove-trivial-for-loops&#34;&gt;remove trivial for loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#remove-dead-lets&#34;&gt;remove dead lets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scope&#34;&gt;Scope&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Halide 是一个用于图像处理加速的 DSL，其底层是一个相对完善的 NN Compiler，相关 IR 已经被 TVM, Tiramisu, Polymage 等多个项目使用。&lt;/p&gt;
&lt;p&gt;本人也曾手撸过一个 NN Compiler 的原型，想通过 Polyhedral compilation 的相关工具链绕过手写 Halide 中底层优化策略，但老实说不是特别成功，Code genration 中 &amp;ldquo;dirty work&amp;rdquo; 貌似是必须的。&lt;/p&gt;
&lt;p&gt;本文是我重读 Halide 代码后做的笔记，其中侧重 Code generation 相关逻辑。&lt;/p&gt;
&lt;p&gt;Halide 代码注释是几个开源 NN Compiler 中比较完善的，思路也非常清晰，比较易于阅读。&lt;/p&gt;
&lt;h2 id=&#34;理解-halide-dsl-语法&#34;&gt;理解 Halide DSL 语法&lt;/h2&gt;
&lt;p&gt;理解 Halide 的语法有助于宏观了解其架构设计，具体可以参考&lt;a href=&#34;https://halide-lang.org/tutorials/tutorial%5Fintroduction.html&#34;&gt;教程&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;Halide&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Func gradient;

Halide&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Var x, y;

Halide : Expr e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y;

gradient(x, y) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; e;

Halide&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Buffer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gradient.realize(&lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;vectorize-parallelize-unroll-dot-dot-dot&#34;&gt;Vectorize, Parallelize, Unroll &amp;hellip;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Are you ready? We&amp;#39;re going to use all of the features above now.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Func &lt;span style=&#34;color:#a6e22e&#34;&gt;gradient_fast&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;gradient_fast&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
gradient_fast(x, y) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y;

&lt;span style=&#34;color:#75715e&#34;&gt;// We&amp;#39;ll process 64x64 tiles in parallel.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Var x_outer, y_outer, x_inner, y_inner, tile_index;
gradient_fast.tile(x, y, x_outer, y_outer, x_inner, y_inner, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)
    .fuse(x_outer, y_outer, tile_index)
    .parallel(tile_index);

&lt;span style=&#34;color:#75715e&#34;&gt;// We&amp;#39;ll compute two scanlines at once while we walk across
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// each tile. We&amp;#39;ll also vectorize in x. The easiest way to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// express this is to recursively tile again within each tile
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// into 4x2 subtiles, then vectorize the subtiles across x and
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// unroll them across y:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Var x_inner_outer, y_inner_outer, x_vectors, y_pairs;
gradient_fast
    .tile(x_inner, y_inner, x_inner_outer, y_inner_outer, x_vectors, y_pairs, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,
          &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    .vectorize(x_vectors)
    .unroll(y_pairs);

&lt;span style=&#34;color:#75715e&#34;&gt;// Note that we didn&amp;#39;t do any explicit splitting or
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// reordering. Those are the most important primitive
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// operations, but mostly they are buried underneath tiling,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// vectorizing, or unrolling calls.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Now let&amp;#39;s evaluate this over a range which is not a
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// multiple of the tile size.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// If you like you can turn on tracing, but it&amp;#39;s going to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// produce a lot of printfs. Instead we&amp;#39;ll compute the answer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// both in C and Halide and see if the answers match.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Buffer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gradient_fast.realize(&lt;span style=&#34;color:#ae81ff&#34;&gt;350&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;type-类型系统&#34;&gt;Type - 类型系统&lt;/h2&gt;
&lt;p&gt;位于 &lt;code&gt;Type.h&lt;/code&gt; 中，包含的类型包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UInt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array&amp;lt;T&amp;gt;&lt;/code&gt; ，上述三种基本类型构成的数组&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ir&#34;&gt;IR&lt;/h2&gt;
&lt;p&gt;所有 IR 节点位于 &lt;a href=&#34;https://github.com/halide/Halide/blob/master/src/IR.h&#34;&gt;IR.h&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;数学计算相关-ir&#34;&gt;数学计算相关 IR&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add&lt;/li&gt;
&lt;li&gt;Sub&lt;/li&gt;
&lt;li&gt;Mul&lt;/li&gt;
&lt;li&gt;Div&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;功能-ir&#34;&gt;功能 IR&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cast&lt;/li&gt;
&lt;li&gt;Load, 从一个 buffer 中加载一个 value&lt;/li&gt;
&lt;li&gt;Broadcast&lt;/li&gt;
&lt;li&gt;Let&lt;/li&gt;
&lt;li&gt;Print, 便于 Debug&lt;/li&gt;
&lt;li&gt;AssertStmt&lt;/li&gt;
&lt;li&gt;Pipeline, ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复杂-ir&#34;&gt;复杂 IR&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Select&lt;/li&gt;
&lt;li&gt;For
&lt;ul&gt;
&lt;li&gt;Execute the &lt;code&gt;body&lt;/code&gt; statement for all values of the variable &lt;code&gt;name&lt;/code&gt; from &lt;code&gt;min&lt;/code&gt; to &lt;code&gt;min+extent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There are four types of For nodes
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;Serial&lt;/code&gt; for loop is a conventional one,&lt;/li&gt;
&lt;li&gt;In a &lt;code&gt;Parallel&lt;/code&gt; for loop, each iteration of the loop happens in parallel or in some unspecified order.&lt;/li&gt;
&lt;li&gt;In a &lt;code&gt;Vectorized&lt;/code&gt; for loop, each iteration maps to one SIMD lane, and the whole loop is executed in one shot. For this case, &lt;code&gt;extent&lt;/code&gt; must be some small integer constant (4, 8 or 16)&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;Unrolled&lt;/code&gt; for loop compiles to a completely unrolled version of the loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Store, store a &lt;code&gt;value&lt;/code&gt; to a &lt;code&gt;buffer&lt;/code&gt; at a given &lt;code&gt;index&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Allocate, allocate a scratch area called with the given name, type and size.&lt;/li&gt;
&lt;li&gt;Range, a single-dimensional span, including all numbers between min and (min+extent-1)&lt;/li&gt;
&lt;li&gt;Region, a multi-dimensional box, &lt;code&gt;vector&amp;lt;Range&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Realize, allocate a &lt;strong&gt;&lt;strong&gt;multi-dimensional buffer&lt;/strong&gt;&lt;/strong&gt; of the given type and size&lt;/li&gt;
&lt;li&gt;Block, a sequence of statements to be executed in-order.&lt;/li&gt;
&lt;li&gt;Function, a reference-counted handle to Halide&#39;s internal representation of a function, similar to a front-end Func object, but with no syntactic suger.&lt;/li&gt;
&lt;li&gt;Call, a function call. It can be
&lt;ul&gt;
&lt;li&gt;a call to some external function(like sin)&lt;/li&gt;
&lt;li&gt;multi-dimensional version of a Load,&lt;/li&gt;
&lt;li&gt;A call to another halide function&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Variable, a named variable. Might be
&lt;ul&gt;
&lt;li&gt;a loop variable,&lt;/li&gt;
&lt;li&gt;a function argument,&lt;/li&gt;
&lt;li&gt;a parameter,&lt;/li&gt;
&lt;li&gt;a reduction variable,&lt;/li&gt;
&lt;li&gt;something defined by a Let or LetStmt node.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stmt-和-expr-的区别&#34;&gt;Stmt 和 Expr 的区别&lt;/h3&gt;
&lt;p&gt;在 Halide 中细分了 Statement 和 Expression 两个概念，在其他一些平台里面只有 Expression.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Statement 表示无返回值的语句&lt;/li&gt;
&lt;li&gt;Expression 有返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ir-相关操作&#34;&gt;IR 相关操作&lt;/h2&gt;
&lt;h3 id=&#34;equality&#34;&gt;Equality&lt;/h3&gt;
&lt;p&gt;位于 &lt;code&gt;IREquality.h&lt;/code&gt; , 用于验证两个 IR 是否等价&lt;/p&gt;
&lt;h3 id=&#34;print&#34;&gt;Print&lt;/h3&gt;
&lt;p&gt;将整个 IR 输出成可读的格式，便于 debug&lt;/p&gt;
&lt;h3 id=&#34;simplify&#34;&gt;Simplify&lt;/h3&gt;
&lt;p&gt;简化 IR 相应语句，比如 &lt;code&gt;a = 2+2+0+b&lt;/code&gt; 会被简化为 &lt;code&gt;a=4+b&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;unrollloops&#34;&gt;UnrollLoops&lt;/h3&gt;
&lt;p&gt;位于 &lt;code&gt;UnrollLoops.h&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将整个 Loop  完全展开。&lt;/p&gt;
&lt;p&gt;之前在用 ISL (polyhderal) 支持 Unroll 时，  操作 &lt;a href=&#34;http://isl.gforge.inria.fr/user.html#AST-Generation-Options-Schedule-Tree&#34;&gt;schedule tree&lt;/a&gt; 部分简直是噩梦。&lt;/p&gt;
&lt;p&gt;Halide 这里的实现非常简洁， 贴下代码 Mark 下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; For &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;for_loop) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (for_loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;for_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; For&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Unrolled) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; IntImm &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;extent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; for_loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;extent.as&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;IntImm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();
    assert(extent &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Can only unroll for loops over a constant extent&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    Stmt body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mutate(for_loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;body);

    Block &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Make n copies of the body, each wrapped in a let that defines the loop
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// var for that body
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; extent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;) {
      Stmt iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; substitute(for_loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;name, for_loop&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;min &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i, body);
      block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Block(iter, block);
    }
    stmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; block;

  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    IRMutator&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;visit(for_loop);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;vectorizeloops&#34;&gt;VectorizeLoops&lt;/h3&gt;
&lt;p&gt;位于 &lt;code&gt;VectorizeLoops.h&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;支持 SIMD 指令的生成。&lt;/p&gt;
&lt;p&gt;Vectorize 同样用 ISL 直接支持是个大坑，理解底层依旧需要类似 Halide IR 来辅助生成。&lt;/p&gt;
&lt;h2 id=&#34;lower&#34;&gt;Lower&lt;/h2&gt;
&lt;p&gt;相关操作&lt;/p&gt;
&lt;h3 id=&#34;bounds-inference&#34;&gt;bounds inference&lt;/h3&gt;
&lt;p&gt;位于 &lt;code&gt;BoundsInference.h&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;bounds&#34;&gt;Bounds&lt;/h4&gt;
&lt;p&gt;对 Expr 进行 bound inference，实现位于 &lt;code&gt;Bounds.h&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;regions-called&#34;&gt;regions_called&lt;/h4&gt;
&lt;h3 id=&#34;slidding-window&#34;&gt;slidding window&lt;/h3&gt;
&lt;h3 id=&#34;simplify&#34;&gt;simplify&lt;/h3&gt;
&lt;h3 id=&#34;storage-folding&#34;&gt;storage folding&lt;/h3&gt;
&lt;h3 id=&#34;storage-flattening&#34;&gt;storage flattening&lt;/h3&gt;
&lt;h3 id=&#34;vectorize-loops&#34;&gt;vectorize loops&lt;/h3&gt;
&lt;h3 id=&#34;unroll-loops&#34;&gt;unroll loops&lt;/h3&gt;
&lt;h3 id=&#34;rewrite-interleavings&#34;&gt;rewrite interleavings&lt;/h3&gt;
&lt;h3 id=&#34;remove-trivial-for-loops&#34;&gt;remove trivial for loops&lt;/h3&gt;
&lt;h3 id=&#34;remove-dead-lets&#34;&gt;remove dead lets&lt;/h3&gt;
&lt;h2 id=&#34;scope&#34;&gt;Scope&lt;/h2&gt;
&lt;p&gt;位于 &lt;code&gt;Scope.h&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;作用域。&lt;/p&gt;
&lt;p&gt;Members:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count;
std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;string, std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; table;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进作用域和出作用域部分的实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Add a new (name, value) pair to the current scope. Hide old
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * values that have this name until we pop this name.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;name, T value) {
  table[name].push(std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;make_pair(value, count));
  count&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/** A name goes out of scope. Restore whatever its old value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * was (or remove it entirely if there was nothing else of the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * same name in an outer scope) */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;name) {
  assert(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;table[name].empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Name not in symbol table&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  table[name].pop();
  count&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
       </item>
       
       <item>
         <title>Linked List Related Algorithms (WIP)</title>
         <link>http://superjomn.github.io/posts/leetcode-list/</link>
         <pubDate>Thu, 26 Dec 2019 00:00:00 +0800</pubDate>
         
         <guid>http://superjomn.github.io/posts/leetcode-list/</guid>
         <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E9%93%BE%E8%A1%A8%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C-%E6%A8%A1%E6%9D%BF&#34;&gt;链表常规操作（模板）&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E8%8E%B7%E5%8F%96%E9%95%BF%E5%BA%A6&#34;&gt;获取长度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%8B%86%E5%88%86%E4%B8%A4%E5%8D%8A&#34;&gt;拆分两半&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF&#34;&gt;判断是否有环&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8&#34;&gt;实际应用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%AF%B9%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F&#34;&gt;对链表排序&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%BB%8F%E5%85%B8%E9%A2%98&#34;&gt;经典题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;由于是半路出家学的计算机，所以基础算法这部分一直没有搞的特别的清楚，长久在工作和日常思维方面的确对比 ACM 的同学有一定劣势。&lt;/p&gt;
&lt;p&gt;但因为想长久从事这个行业，加上初步投入一定时间练习基础题后，自己觉得思维方面有一定的补充效果，所以决定长期做一些积累。&lt;/p&gt;
&lt;p&gt;我会按多个文章来记录，每个文章聚焦一些主题，这样有利于整理一些思考。&lt;/p&gt;
&lt;p&gt;所有的题目均来自 Leetcode，这样便于所见即所得；相应的编程语言，由于与算法无关，因此我会按方便所需混用 Python 和 C++。&lt;/p&gt;
&lt;h2 id=&#34;链表常规操作-模板&#34;&gt;链表常规操作（模板）&lt;/h2&gt;
&lt;h3 id=&#34;获取长度&#34;&gt;获取长度&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_length&lt;/span&gt;(node):
    len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; node:
        len &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;拆分两半&#34;&gt;拆分两半&lt;/h3&gt;
&lt;p&gt;采用 slow, fast 双指针，slow 指针每次走 1 步，fast 指针每次走 2 步&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;split_two_half&lt;/span&gt;(node):
    pre &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fast &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; fast &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; fast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next:
        &lt;span style=&#34;color:#75715e&#34;&gt;# fast pointer go 2x steps&lt;/span&gt;
        fast &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        pre &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#75715e&#34;&gt;# mid pointer go x steps&lt;/span&gt;
        mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next

    l0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node
    pre&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
    l2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; l0, l2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;判断是否有环&#34;&gt;判断是否有环&lt;/h3&gt;
&lt;h2 id=&#34;实际应用&#34;&gt;实际应用&lt;/h2&gt;
&lt;h3 id=&#34;对链表排序&#34;&gt;对链表排序&lt;/h3&gt;
&lt;h2 id=&#34;经典题&#34;&gt;经典题&lt;/h2&gt;
</description>
       </item>
       
       <item>
         <title>通过 Org Mode 和 hugo 搭建 Blog</title>
         <link>http://superjomn.github.io/posts/hugo/</link>
         <pubDate>Thu, 26 Dec 2019 00:00:00 +0800</pubDate>
         
         <guid>http://superjomn.github.io/posts/hugo/</guid>
         <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%AE%89%E8%A3%85-hugo&#34;&gt;安装 Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#emacs-%E4%B8%AD%E5%AE%89%E8%A3%85-ox-hugo&#34;&gt;emacs 中安装 ox-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%B0%E5%BB%BA-hugo-%E7%AB%99%E7%82%B9&#34;&gt;新建 hugo 站点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%95%B4%E4%BD%93%E6%89%93%E9%80%9A&#34;&gt;整体打通&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;本人用了 org-mode 已经很长一段时间了，主要的信息整理都完全通过 org mode 完成。
自己做一些笔记但毕竟琐碎，所以计划当知识逐渐成体系后，通过博文的方式做总结。&lt;/p&gt;
&lt;p&gt;org-mode + ox-huge 是目前我能找到的最方便的工具，当然我本人最关注的是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单可靠&lt;/li&gt;
&lt;li&gt;博客主题样式（默认）素朴，无需纠结&lt;/li&gt;
&lt;li&gt;能复用 org-mode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装-hugo&#34;&gt;安装 Hugo&lt;/h2&gt;
&lt;p&gt;Hugo 是 golang 编写的博客系统，主要特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速&lt;/li&gt;
&lt;li&gt;简单，单机易配置&lt;/li&gt;
&lt;li&gt;更新迅速&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;地址： &lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装文档： &lt;a href=&#34;https://gohugo.io/getting-started/installing/&#34;&gt;https://gohugo.io/getting-started/installing/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我这里是 Mac 安装，参考文档直接执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证安装正确，可以执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;hugo help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证得到正确的帮助列表。&lt;/p&gt;
&lt;h2 id=&#34;emacs-中安装-ox-hugo&#34;&gt;emacs 中安装 ox-hugo&lt;/h2&gt;
&lt;p&gt;文档： &lt;a href=&#34;https://ox-hugo.scripter.co/&#34;&gt;https://ox-hugo.scripter.co/&lt;/a&gt;
安装文档：&lt;a href=&#34;https://ox-hugo.scripter.co/#usage&#34;&gt;https://ox-hugo.scripter.co/#usage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我本人用的 spacemacs，因此直接往 &lt;code&gt;.spacemacs&lt;/code&gt; 文件中 &lt;code&gt;user-config&lt;/code&gt; 位置增加&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun dotspacemacs/user-config ()
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Other stuff&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; ..&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;;; ox-hugo config&lt;/span&gt;
  (use-package ox-hugo
    :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;;Auto-install the package from Melpa (optional)&lt;/span&gt;
    :after ox))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重新启动 emacs 便可。&lt;/p&gt;
&lt;h2 id=&#34;新建-hugo-站点&#34;&gt;新建 hugo 站点&lt;/h2&gt;
&lt;p&gt;这部分操作可以直接参考 Hugo 的 &lt;a href=&#34;https://gohugo.io/getting-started/quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;hugo new site myorgs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;整体打通&#34;&gt;整体打通&lt;/h2&gt;
&lt;p&gt;org-mode 连接到 hugo，是通过 ox-hugo 将 org 文件转换为 markdown 格式，并自动复制到 hugo 站点相应的路径，这里需要有两个路径配置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;HUGO_SECTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HUGO_BASE_DIR&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我这里直接在 org 文件的开头做配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+hugo_base_dir&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: ~/project/myblog&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#+hugo_section&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: ./posts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后在 emacs 中执行 &lt;code&gt;org-hugo-export-to-md&lt;/code&gt; 命令就能够完成 hugo 中 markdown 文章的生成工作，之后到 hugo 站点路径下，执行 hugo 相应命令便可。&lt;/p&gt;
&lt;p&gt;当然也可以通过 &lt;code&gt;org-hugo-auto-export-mode&lt;/code&gt; ，当 org 文件编辑时，同步输出到 hugo 中。&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title></title>
         <link>http://superjomn.github.io/posts/leetcode_array/</link>
         <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/leetcode_array/</guid>
         <description></description>
       </item>
       
       <item>
         <title></title>
         <link>http://superjomn.github.io/posts/leetcode_dp/</link>
         <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/leetcode_dp/</guid>
         <description></description>
       </item>
       
       <item>
         <title></title>
         <link>http://superjomn.github.io/posts/leetcode_tree/</link>
         <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/leetcode_tree/</guid>
         <description></description>
       </item>
       
     </channel>
   </rss>
