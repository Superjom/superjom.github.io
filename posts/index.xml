
   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>Superjomn&#39;s Blog</title>
       <link>http://superjomn.github.io/posts/</link>
       <description>Recent content on Superjomn&#39;s Blog</description>
       <generator>Hugo -- gohugo.io</generator>
       <language>en-us</language>
       <lastBuildDate>Sun, 29 Dec 2019 00:00:00 +0000</lastBuildDate>
       
           <atom:link href="http://superjomn.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>Builer Design Pattern</title>
         <link>http://superjomn.github.io/posts/design_pattern_builder/</link>
         <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/design_pattern_builder/</guid>
         <description>&lt;h1 id=&#34;heading&#34;&gt;简介&lt;/h1&gt;
&lt;p&gt;Builder Pattern 可以用来帮助创建构造函数很多备选参数的复杂类，比如定义一个 Computer 类&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Computer&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    Computer(GrapicsCard g, Monitor m, Process p, Memory ram)
    &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;graphics_card_(g),
     monitors_(m),
     processor_(p),
     ram_(ram) { ... }
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    GraphicsCard graphics_card_;
    Monitor monitors_;
    Processor processor_;
    Memory ram_;
};

&lt;span style=&#34;color:#75715e&#34;&gt;// usage
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Computer &lt;span style=&#34;color:#a6e22e&#34;&gt;compter&lt;/span&gt;(g, m, p, ram); &lt;span style=&#34;color:#75715e&#34;&gt;// hard to read
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Builder 能够以更可读的方式实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ComputerBuilder&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Computer&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Pass a pointer for std::move some heavy members.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Computer(ComputerBuilder&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; builder);
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    GraphicsCard graphics_card_;
    Monitor monitors_;
    Processor processor_;
    Memory ram_;
};

&lt;span style=&#34;color:#75715e&#34;&gt;// in cpp file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Computer:Computer(ComputerBuilder&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; builder) {
    graphics_card_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builder&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;graphics_card();
    monitors_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builder&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;monitors();
    processors_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builder&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;processor();
    ram_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builder&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;ram();
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ComputerBuilder&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    CompterBuilder() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;;
    
    ComputerBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SetGraphicsCard(GraphicsCard x) { graphics_card_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x; }
   	ComputerBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SetMonitor(Monitor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { monitors_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x; }
    ComputerBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SetProcessors(Processor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { processors_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x; }
    ComputerBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SetMemory(Memory&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { ram_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x; }
    Computer &lt;span style=&#34;color:#a6e22e&#34;&gt;Build&lt;/span&gt;() { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Computer(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;); }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    GraphicsCard graphics_card_;
    Monitor monitors_;
    Processor processor_;
    Memory ram_;    
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; computer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ComputerBuilder().SetGraphicsCard(...)
                                 .SetMonitor(...)
                                 .SetProcessors(...)
                                 .SetMemory(...)
                                 .Build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading-1&#34;&gt;实际应用&lt;/h1&gt;
&lt;p&gt;TensorFlow 里的 operator 的注册有用到，具体可以参考任何 operator 的 .cc 文件&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://riptutorial.com/design-patterns/example/12132/builder-pattern---java-implementation&#34;&gt;Builder pattern - Java implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>Visitor Design Pattern</title>
         <link>http://superjomn.github.io/posts/design_pattern_visitor/</link>
         <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/design_pattern_visitor/</guid>
         <description>&lt;p&gt;Visitor Pattern 用于表示对某种对象的操作，当增加新的操作时，无需修改被操作对象的代码。&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;使用前&lt;/h1&gt;
&lt;p&gt;比如，我们定义一类宠物，有两个实现猫(Cat) 和狗(Dog)；宠物都有抚摸(Stroke) 和喂食(Feed) 的操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pet&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Stroke() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Feed&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对应实现 Cat 和 Dog 的两个操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cat&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Pet {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Stroke() &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;/* cat stroke way */&lt;/span&gt; }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Feed&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;/* cat feed way */&lt;/span&gt; }
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Pet {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Stroke() &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;/* dog stroke way */&lt;/span&gt; }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Feed&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;/* dog feed way */&lt;/span&gt; }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类似 &lt;code&gt;Pet&lt;/code&gt; 这样的接口实现，会有如下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类似 Stroke 和 Feed 这类 Pet 操作，会有很多，比如 Train, Hug 等等&lt;/li&gt;
&lt;li&gt;每增加一种操作，都需要修改所有 Pet 的实现，工作量可能很大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Visitor Pattern 就是用于优化此类场景的建模，在增加更多操作后，不需要修改被操作方的代码。&lt;/p&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;模板&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// interfaces
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visitor&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Visit(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; AccepterA&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; AccepterB&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
};
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Accepter&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(Visitor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; visitor) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
};

&lt;span style=&#34;color:#75715e&#34;&gt;// implementations
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AccepterA&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(Visitor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { x.Visit(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;); }
};
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AccepterB&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(Visitor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { x.Visit(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;); }
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SomeVisitor&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Visit(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; AccepterA&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { ... }  &lt;span style=&#34;color:#75715e&#34;&gt;// operate on AccepterA 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; AccepterB&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x) { ... }  &lt;span style=&#34;color:#75715e&#34;&gt;// operate on AccepterB
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};


&lt;span style=&#34;color:#75715e&#34;&gt;// use it
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Accepter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; accepters;
    SomeVisitor visitor;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; x : accepters) {
        x.Accept(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;visitor);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading-2&#34;&gt;使用后&lt;/h1&gt;
&lt;p&gt;对应着，之前的示例可以修改为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Visitor interface
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PetVisitor&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Visit(Dog&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; dog);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visit&lt;/span&gt;(Cat&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; cat);
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StrokeOpr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PetVisitor {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Visit(Dog&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; dog) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;stroke a dog&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; endl;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visit&lt;/span&gt;(Cat&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; cat) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;stroke a cat&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; endl;
    }
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FeedOpr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PetVisitor {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Visit(Dog&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; dog) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;feed a dog&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; endl;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visit&lt;/span&gt;(Cat&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; cat) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;feed a cat&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; endl;
    }
};

&lt;span style=&#34;color:#75715e&#34;&gt;// Pet interface
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pet&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(PetVisitor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; visitor) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cat&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(PetVisitor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; visitor) &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; { visitor&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Visit(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;); }
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(PetVisitor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; visitor) &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; { visitor&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Visit(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;); }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading-3&#34;&gt;实际案例&lt;/h1&gt;
&lt;p&gt;之前在一些 NN Compiler 里看到 IR 用了这个设计模式，比较早的是 Halide 的代码，比如 &lt;a href=&#34;https://github.com/halide/Halide/blob/release_2019_08_27/src/IRVisitor.h&#34;&gt;IRVisitor.h&lt;/a&gt; ，这里摘抄部分&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** A base class for algorithms that need to recursively walk over the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * IR. The default implementations just recursively walk over the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * children. Override the ones you care about.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IRVisitor&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    IRVisitor();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;IRVisitor();
&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ExprNode&amp;lt;&amp;gt; and StmtNode&amp;lt;&amp;gt; are allowed to call visit (to implement accept())
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;friend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExprNode&lt;/span&gt;;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;friend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StmtNode&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; IntImm &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; UIntImm &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FloatImm &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; StringImm &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Cast &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Variable &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Add &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Sub &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Mul &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Div &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Mod &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Min &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Max &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; EQ &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; NE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; LT &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; LE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; GT &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; GE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; And &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Or &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Not &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Select &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Load &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Ramp &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Broadcast &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Call &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Let &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; LetStmt &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; AssertStmt &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ProducerConsumer &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; For &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Store &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Provide &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Allocate &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Free &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Realize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Block &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; IfThenElse &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Evaluate &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Shuffle &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Prefetch &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Fork &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Acquire &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最开头说过，Visitor Pattern 的好处是，增加新操作时，无需对操作对象做修改，这里 IR 的操作对象有 34 个，能感受到规模和效果了吧。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpppatterns.com/patterns/visitor.html&#34;&gt;C++ Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/visitor-design-pattern/&#34;&gt;Visitor Design Pattern - GeeksforGeeks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>BST related</title>
         <link>http://superjomn.github.io/posts/leetcode_bst/</link>
         <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/leetcode_bst/</guid>
         <description>&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;常用技巧&lt;/h1&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;经典题型&lt;/h1&gt;
&lt;h2 id=&#34;bst-generation&#34;&gt;BST Generation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/unique-binary-search-trees-ii/&#34;&gt;https://leetcode.com/problems/unique-binary-search-trees-ii/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;helper&lt;/span&gt;(l, r):
        trees &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; r:
            trees&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(TreeNode(l))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; r:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(l, r&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;): &lt;span style=&#34;color:#75715e&#34;&gt;# note, there is n+1&lt;/span&gt;
                ls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; helper(l, m&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                rs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; helper(m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, r)
                ls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ls &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ls &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; [None]
                rs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rs &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rs &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; [None]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; lt &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ls:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; rt &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; rs:
                        mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(m)
                        mid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lt
                        mid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rt
                        trees&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(mid)
         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; trees
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; helper(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
       </item>
       
       <item>
         <title>Design Pattern Observer 观察者模式</title>
         <link>http://superjomn.github.io/posts/design_pattern_observer/</link>
         <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/design_pattern_observer/</guid>
         <description>&lt;p&gt;想象这样的场景，为气象站设计一整套系统，支持订阅功能，不同的仪器，比如手机、LED显示屏在天气发生大的变化时，会自动收到更新信息。&lt;/p&gt;
&lt;p&gt;其中的挑战有&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;订阅的设备的列表可能随时发生变化
&lt;ol&gt;
&lt;li&gt;比如，手机没电下线了；或者一个新的手机加入了订阅&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;气象站的带宽有限，订阅设备数可能很大
&lt;ol&gt;
&lt;li&gt;所以，无法支持每种设备简单 &lt;code&gt;while(true) { sleep(20); request_for_data(); }&lt;/code&gt; 的实现&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;更新需要实时&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类似这样的场景，就是观察者模式适用的。&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;接口定义&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Observable&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Observer&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Update the state of this observer.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Update(Observable&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; obs) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;    
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Observable&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Register an observer.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RegisterObserver(Observer &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;observer) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Notify all the registered observers when a change happened.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotifyObservers&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading-1&#34;&gt;具体实现&lt;/h1&gt;
&lt;p&gt;以 Weather station 为例，我们创建一些基础设施：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WeatherData&lt;/code&gt; 作为被观察者，被其他 observer 观察&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Client&lt;/code&gt; 作为观察者，订阅和观察 &lt;code&gt;WeatherData&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;observable-&#34;&gt;Observable 实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WeatherData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Observable {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RegisterObserver(Observer&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; observer) &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; {
        observers_.push_back(observer);
    }
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotifyObservers&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;changed_) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// avoid unnecessary update.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; observer: observers) {
            observer&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Update(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
        }
        changed_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
    }
    
    &lt;span style=&#34;color:#75715e&#34;&gt;// getter
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temperature&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; temperature_; }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;humidity&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; humidity_; }
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Mark whether the state is changed recently.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; changed_{false};
    &lt;span style=&#34;color:#75715e&#34;&gt;// the whether states are as follows
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; temperature_{};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; humidity_{};
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;observer-&#34;&gt;Observer 实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Observer {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Update(Observer&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; obs) &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;// Here is compatible with different kinds of Observer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; theobs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dynamic_cast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;WeatherData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(obs);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (theobs) {
            &lt;span style=&#34;color:#75715e&#34;&gt;// do something
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            DisplayTemperature(theobs&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;temperature());
            DisplayHumidity(theobs&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;humidity());
        }
    }
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DisplayTemperature&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; x) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DisplayHumidity&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; x) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Head First 设计模式&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>Linked List related</title>
         <link>http://superjomn.github.io/posts/leetcode_list/</link>
         <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/leetcode_list/</guid>
         <description>&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;常用技巧&lt;/h1&gt;
&lt;h2 id=&#34;reverse&#34;&gt;reverse&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# the head of the list&lt;/span&gt;
fake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# create a faked node for easier operation&lt;/span&gt;
fake&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fake&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; p:
    tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fake&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
    fake&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p
    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;题型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/reverse-linked-list-ii/&#34;&gt;92. Reverse Linked List II&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;circle&#34;&gt;Circle&lt;/h2&gt;
&lt;p&gt;判断是否有环，采用快慢双指针&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;has_circle&lt;/span&gt;(head):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; head &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
    slow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
    fast &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#75715e&#34;&gt;# Note here&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; fast &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; fast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; fast &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; slow: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
      	fast &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        slow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
       </item>
       
       <item>
         <title>深度学习平台开发中的十个“坑”</title>
         <link>http://superjomn.github.io/posts/challenges-in-deep-learning-platform/</link>
         <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/challenges-in-deep-learning-platform/</guid>
         <description>&lt;p&gt;从事 PaddlePaddle 深度学习平台已经过二.五载，完整经历了 Paddle Fluid 架构从无到有到如今相对稳定，相关的所看所干所思已经有一定积累了，这段时间整理下来。&lt;/p&gt;
&lt;p&gt;PaddlePaddle 是类似 TensorFlow 的深度学习平台，包括训练（分布式）、预测、Hub、Serving 等完整自主工作链，这块在国内还是非常难得的。&lt;/p&gt;
&lt;p&gt;类似这样规模的系统是一个硬骨头，能到与各超大体量的公司（谷歌、Facebook、Amazon）在局部战役上达到一定的分庭抗礼的局面，这个对于 Team 已经是以小博大比较显著的成果了，但革命尚未成功，同志们仍需努力。&lt;/p&gt;
&lt;p&gt;我整理了个人理解中，开发过程中的十个“坑”，所谓坑，这里定义为“困难”；有坑就应该有填坑的方法，但惭愧的是，其中有几个尚没有个人能够接受的解决方法，只能给出一部分思考，以期抛砖引玉。&lt;/p&gt;
&lt;p&gt;在阐述中，我会避免涉及 PaddlePaddle 中具体实施的方案，而以普世的例子给出，以避免一些困扰。&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;深度学习平台简介&lt;/h1&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;训练框架&lt;/h2&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;预测&lt;/h2&gt;
&lt;h2 id=&#34;heading-3&#34;&gt;分布式训练&lt;/h2&gt;
&lt;h1 id=&#34;-&#34;&gt;坑一： 兼容性之殇&lt;/h1&gt;
&lt;p&gt;当最早的DNN平台迭代几个版本后，兼容性问题就开始凸显了。&lt;/p&gt;
&lt;h2 id=&#34;operator-&#34;&gt;Operator 的兼容性&lt;/h2&gt;
&lt;h2 id=&#34;heading-4&#34;&gt;模型粒度的兼容性&lt;/h2&gt;
&lt;h2 id=&#34;api&#34;&gt;API升级，旧模型旧用法怎么办&lt;/h2&gt;
&lt;h1 id=&#34;mvp-vs-&#34;&gt;坑二：MVP vs 生产环境&lt;/h1&gt;
&lt;h2 id=&#34;mvp&#34;&gt;MVP的快速构建&lt;/h2&gt;
&lt;h2 id=&#34;heading-5&#34;&gt;生产环境的不适应&lt;/h2&gt;
&lt;h1 id=&#34;heading-6&#34;&gt;坑三：大杂烩，多方向迭代&lt;/h1&gt;
&lt;p&gt;训练迭代了，解决影响了预测&lt;/p&gt;
&lt;h1 id=&#34;ci&#34;&gt;坑四：CI&lt;/h1&gt;
&lt;h1 id=&#34;heading-7&#34;&gt;坑五：多硬件支持&lt;/h1&gt;
&lt;h2 id=&#34;heading-8&#34;&gt;依赖管理&lt;/h2&gt;
&lt;h2 id=&#34;heading-9&#34;&gt;架构设计&lt;/h2&gt;
&lt;h1 id=&#34;heading-10&#34;&gt;坑六：文档，文档&lt;/h1&gt;
&lt;h1 id=&#34;heading-11&#34;&gt;坑七：业务需求&lt;/h1&gt;
&lt;p&gt;业务太多，需求太多&lt;/p&gt;
&lt;h1 id=&#34;heading-12&#34;&gt;坑八：人力，管理&lt;/h1&gt;
&lt;p&gt;业务太多，需要做的事情太多，人力无法排布&lt;/p&gt;
&lt;h1 id=&#34;heading-13&#34;&gt;坑九：开关之殇&lt;/h1&gt;
&lt;p&gt;各种 FLAG&lt;/p&gt;
&lt;h1 id=&#34;heading-14&#34;&gt;坑十：性能性能&lt;/h1&gt;
&lt;p&gt;性能需要耗费巨大的人力，且与硬件相关&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Linked List Related Algorithms (WIP)</title>
         <link>http://superjomn.github.io/posts/leetcode-list/</link>
         <pubDate>Thu, 26 Dec 2019 00:00:00 +0800</pubDate>
         
         <guid>http://superjomn.github.io/posts/leetcode-list/</guid>
         <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E9%93%BE%E8%A1%A8%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C-%E6%A8%A1%E6%9D%BF&#34;&gt;链表常规操作（模板）&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E8%8E%B7%E5%8F%96%E9%95%BF%E5%BA%A6&#34;&gt;获取长度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%8B%86%E5%88%86%E4%B8%A4%E5%8D%8A&#34;&gt;拆分两半&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF&#34;&gt;判断是否有环&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8&#34;&gt;实际应用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%AF%B9%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F&#34;&gt;对链表排序&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%BB%8F%E5%85%B8%E9%A2%98&#34;&gt;经典题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;由于是半路出家学的计算机，所以基础算法这部分一直没有搞的特别的清楚，长久在工作和日常思维方面的确对比 ACM 的同学有一定劣势。&lt;/p&gt;
&lt;p&gt;但因为想长久从事这个行业，加上初步投入一定时间练习基础题后，自己觉得思维方面有一定的补充效果，所以决定长期做一些积累。&lt;/p&gt;
&lt;p&gt;我会按多个文章来记录，每个文章聚焦一些主题，这样有利于整理一些思考。&lt;/p&gt;
&lt;p&gt;所有的题目均来自 Leetcode，这样便于所见即所得；相应的编程语言，由于与算法无关，因此我会按方便所需混用 Python 和 C++。&lt;/p&gt;
&lt;h2 id=&#34;链表常规操作-模板&#34;&gt;链表常规操作（模板）&lt;/h2&gt;
&lt;h3 id=&#34;获取长度&#34;&gt;获取长度&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_length&lt;/span&gt;(node):
    len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; node:
        len &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;拆分两半&#34;&gt;拆分两半&lt;/h3&gt;
&lt;p&gt;采用 slow, fast 双指针，slow 指针每次走 1 步，fast 指针每次走 2 步&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;split_two_half&lt;/span&gt;(node):
    pre &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fast &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; fast &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; fast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next:
        &lt;span style=&#34;color:#75715e&#34;&gt;# fast pointer go 2x steps&lt;/span&gt;
        fast &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        pre &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#75715e&#34;&gt;# mid pointer go x steps&lt;/span&gt;
        mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next

    l0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node
    pre&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
    l2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; l0, l2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;判断是否有环&#34;&gt;判断是否有环&lt;/h3&gt;
&lt;h2 id=&#34;实际应用&#34;&gt;实际应用&lt;/h2&gt;
&lt;h3 id=&#34;对链表排序&#34;&gt;对链表排序&lt;/h3&gt;
&lt;h2 id=&#34;经典题&#34;&gt;经典题&lt;/h2&gt;
</description>
       </item>
       
       <item>
         <title>通过 Org Mode 和 hugo 搭建 Blog</title>
         <link>http://superjomn.github.io/posts/hugo/</link>
         <pubDate>Thu, 26 Dec 2019 00:00:00 +0800</pubDate>
         
         <guid>http://superjomn.github.io/posts/hugo/</guid>
         <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%AE%89%E8%A3%85-hugo&#34;&gt;安装 Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#emacs-%E4%B8%AD%E5%AE%89%E8%A3%85-ox-hugo&#34;&gt;emacs 中安装 ox-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%B0%E5%BB%BA-hugo-%E7%AB%99%E7%82%B9&#34;&gt;新建 hugo 站点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%95%B4%E4%BD%93%E6%89%93%E9%80%9A&#34;&gt;整体打通&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;本人用了 org-mode 已经很长一段时间了，主要的信息整理都完全通过 org mode 完成。
自己做一些笔记但毕竟琐碎，所以计划当知识逐渐成体系后，通过博文的方式做总结。&lt;/p&gt;
&lt;p&gt;org-mode + ox-huge 是目前我能找到的最方便的工具，当然我本人最关注的是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单可靠&lt;/li&gt;
&lt;li&gt;博客主题样式（默认）素朴，无需纠结&lt;/li&gt;
&lt;li&gt;能复用 org-mode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装-hugo&#34;&gt;安装 Hugo&lt;/h2&gt;
&lt;p&gt;Hugo 是 golang 编写的博客系统，主要特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速&lt;/li&gt;
&lt;li&gt;简单，单机易配置&lt;/li&gt;
&lt;li&gt;更新迅速&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;地址： &lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装文档： &lt;a href=&#34;https://gohugo.io/getting-started/installing/&#34;&gt;https://gohugo.io/getting-started/installing/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我这里是 Mac 安装，参考文档直接执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证安装正确，可以执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;hugo help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证得到正确的帮助列表。&lt;/p&gt;
&lt;h2 id=&#34;emacs-中安装-ox-hugo&#34;&gt;emacs 中安装 ox-hugo&lt;/h2&gt;
&lt;p&gt;文档： &lt;a href=&#34;https://ox-hugo.scripter.co/&#34;&gt;https://ox-hugo.scripter.co/&lt;/a&gt;
安装文档：&lt;a href=&#34;https://ox-hugo.scripter.co/#usage&#34;&gt;https://ox-hugo.scripter.co/#usage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我本人用的 spacemacs，因此直接往 &lt;code&gt;.spacemacs&lt;/code&gt; 文件中 &lt;code&gt;user-config&lt;/code&gt; 位置增加&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun dotspacemacs/user-config ()
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Other stuff&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; ..&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;;; ox-hugo config&lt;/span&gt;
  (use-package ox-hugo
    :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;;Auto-install the package from Melpa (optional)&lt;/span&gt;
    :after ox))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重新启动 emacs 便可。&lt;/p&gt;
&lt;h2 id=&#34;新建-hugo-站点&#34;&gt;新建 hugo 站点&lt;/h2&gt;
&lt;p&gt;这部分操作可以直接参考 Hugo 的 &lt;a href=&#34;https://gohugo.io/getting-started/quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;hugo new site myorgs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;整体打通&#34;&gt;整体打通&lt;/h2&gt;
&lt;p&gt;org-mode 连接到 hugo，是通过 ox-hugo 将 org 文件转换为 markdown 格式，并自动复制到 hugo 站点相应的路径，这里需要有两个路径配置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;HUGO_SECTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HUGO_BASE_DIR&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我这里直接在 org 文件的开头做配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+hugo_base_dir&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: ~/project/myblog&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#+hugo_section&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: ./posts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后在 emacs 中执行 &lt;code&gt;org-hugo-export-to-md&lt;/code&gt; 命令就能够完成 hugo 中 markdown 文章的生成工作，之后到 hugo 站点路径下，执行 hugo 相应命令便可。&lt;/p&gt;
&lt;p&gt;当然也可以通过 &lt;code&gt;org-hugo-auto-export-mode&lt;/code&gt; ，当 org 文件编辑时，同步输出到 hugo 中。&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title></title>
         <link>http://superjomn.github.io/posts/leetcode_array/</link>
         <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/leetcode_array/</guid>
         <description></description>
       </item>
       
       <item>
         <title></title>
         <link>http://superjomn.github.io/posts/leetcode_dp/</link>
         <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/leetcode_dp/</guid>
         <description></description>
       </item>
       
       <item>
         <title></title>
         <link>http://superjomn.github.io/posts/leetcode_tree/</link>
         <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
         
         <guid>http://superjomn.github.io/posts/leetcode_tree/</guid>
         <description></description>
       </item>
       
     </channel>
   </rss>
